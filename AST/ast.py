import json

"""
input: vulns.json 路径
output: vuln_ast 与package相关的cves
"""
def vulns_ast(raw_vulns):
    ast=[]
    for i in raw_vulns['matches']:
            print(i)
            vuln_metadate={}
            vuln = i['vulnerability']
            fix = vuln['fix']
            id = vuln['id']
            package={}
            oripackage={}
            cvss={}
            if i['relatedVulnerabilities']:
                relatedvuln = i['relatedVulnerabilities'][0]
                id = relatedvuln['id']
                # cvss={}
                if relatedvuln['cvss']:
                    cvss = relatedvuln['cvss'][-1]

                artifact = i['artifact']
                package = artifact['name']
                oripackage = artifact['upstreams'][0]['name'] if artifact['upstreams'] else package
                
            vuln_metadate['cveid'] = id
            vuln_metadate['cvss'] = cvss
            vuln_metadate['fix'] = fix
            vuln_metadate['package'] = package
            vuln_metadate['oripackage'] = oripackage
            ast.append(vuln_metadate)
    return ast

def sbomhelper(raw_sbom,files_dict,packages_dict):
    packages = raw_sbom['artifacts']
    files = raw_sbom['files']

    # files_dict = {}
    # packages_dict = {}
    for file in files:
        files_dict[file['id']] = file['location']['path']
    for package in packages:

        if "package" not in package['metadata']:
            files_dict[package['id']] = package['name']
            continue
        
        seq = ('package','source')
        packages_dict[package['id']] = dict.fromkeys(seq)

        packages_dict[package['id']]['package'] = package['name']
        if "source" in package['metadata']:
            packages_dict[package['id']]['source'] = package['metadata']['source']

"""
input: sbom.json 路径
output: sbom_ast 与package相关的files
"""   
def sbom_ast(raw_sbom):
    ast = {}
    # packages = raw_sbom['artifacts']
    relationships = raw_sbom['artifactRelationships']
    # files = raw_sbom['files']

    files_dict = {}
    packages_dict = {}
    sbomhelper(raw_sbom,files_dict,packages_dict)
    # for file in files:
    #     files_dict[file['id']] = file['location']['path']
    # for package in packages:

    #     seq = ('package','source')
    #     packages_dict[package['id']] = dict.fromkeys(seq)
    #     # print(package['metadata']['package'])
    #     # print(package['metadata']['source'])
    #     packages_dict[package['id']]['package'] = package['name']
    #     if "source" in package['metadata']:
    #         packages_dict[package['id']]['source'] = package['metadata']['source']
    
    # try:
    #     # i = 1
    for relationship in relationships:
        package_id = relationship['parent']
        file_id = relationship['child']
        try:
            if packages_dict[package_id]['source']:
                # print('source')
                # print(packages_dict[package_id]['source'])
                if packages_dict[package_id]['source'] not in ast:
                    ast[packages_dict[package_id]['source']] = {}
                if packages_dict[package_id]['package'] not in ast[packages_dict[package_id]['source']]:
                    ast[packages_dict[package_id]['source']][packages_dict[package_id]['package']] = []
                ast[packages_dict[package_id]['source']][packages_dict[package_id]['package']].append(files_dict[file_id])
            else:
                # print('package')
                # print(packages_dict[package_id]['package'])
                if packages_dict[package_id]['package'] not in ast:
                    ast[packages_dict[package_id]['package']] = {}
                if packages_dict[package_id]['package'] not in ast[packages_dict[package_id]['package']]:
                    ast[packages_dict[package_id]['package']][packages_dict[package_id]['package']] = []
                ast[packages_dict[package_id]['package']][packages_dict[package_id]['package']].append(files_dict[file_id])
                # ast[packages_dict[package_id]['package']].append(files_dict[file_id])
        except KeyError as e:
            print(e)
        # print(type(e))
        # with open('test.json','w',encoding='utf-8') as f:
        #     f.write()
        # f.close()
    return ast



# file = open('vulns.json','r')
file = open('sbom.json','r')
raw_sbom = json.load(file)
file.close()
# ast=vulns_ast(raw_sbom)
ast = sbom_ast(raw_sbom)
# print(ast)

# print(len(ast))

with open('example_aft.json','w',encoding='utf-8') as f:
# with open('example_avt.json','w',encoding='utf-8') as f:
    f.write(json.dumps(ast))
f.close()

